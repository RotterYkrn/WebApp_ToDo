## 重要

ユーザーはClineよりプログラミングが得意ですが、時短のためにClineにコーディングを依頼しています。

ただし、ClineはGitHubから学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

# プロジェクト概要

個人開発のToDoアプリケーションプロジェクトです。

- 実行環境
  - Docker
    - Docker Compose
- フロントエンド
  - vanilla JavaScript
    - ESM + JSDoc + tsc で、コードをJavaScriptで記述しつつ、TypeScriptの型検証の部分を活用します
  - Vite
  - Biome
- バックエンド
  - vanilla JavaScript
    - ESM + JSDoc + tsc で、コードをJavaScriptで記述しつつ、TypeScriptの型検証の部分を活用します
  - Express
  - Prisma
  - MySQL

# ディレクトリ構造

.
├── client/                 # フロントエンド
│   ├── src/                # コード群
│   │   ├── dist-tsc/       # tscの出力結果用
│   │   ├── scripts/        # JavaScriptコード群
│   │   ├── styles/         # スタイルシートコード群
│   │   └── index.html      # HTML
│   ├── dist                # Viteの出力結果用
│   └── Dockerfile
├── server/                 # バックエンド
│   ├── prisma/
│   │   ├── schema.prisma   # Prismaの設定、スキーマ定義
│   │   └── migrations      # Prismaのマイグレーション履歴
│   ├── generated/
│   │   └── prisma/         # ORMの自動生成コード群
│   ├── src/                # JavaScriptコード群
│   ├── dist/               # tscの出力結果用
│   └── Dockerfile
├── db/
└── docker-compose.yaml

# 規約

## コードの書式

- JavaScriptのコードはESMで記述してください。
- JavaScriptのコードには、必ずJSDocを付けてください。
- tscで型検証を行ってください。
- エディタ内の警告にもなるべく対処してください。

## コマンド実行

- 実行環境はDockerコンテナ内であり、dbのテーブルもそこに生成されています。
- prisma関連のコマンドは、serverコンテナ内で実行してください。
- client,serverでは、ホットリロードや再読み込みで変更内容が反映されるようにしているので、都度実行する必要はありません。
  - 実行結果の解析は、Docker logsなどで行うことを推奨します。

## 注意点

フォーマッタやリンタによって、保存時にコードが変更される場合があります。
それが原因でエラーが出たり、動作が意図したものでなくなったと判断した場合は、
ユーザに判断を仰いでください。

# セキュリティガイドライン

## 機密ファイル

以下のファイルの読み取りと変更を禁止：

- .env ファイル
- APIキー、トークン、認証情報を含むすべてのファイル

## セキュリティ対策

- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力に認証情報を含めない


# レポートについて
これからやろうとしていること、やったことなど、あなたの発言は日本語でしてほしい。

# 開発の進め方
君と僕は一緒に開発を進めていくことになる。
そこで、足並みを揃えて、お互いにコードの方針を理解しながらプログラミングをしたいと思っている。

具体的には、ある程度小さい単位で私にコードレビューを依頼してほしい。
君は頭が良いが、ややコードが複雑になりすぎるので、私がそうならないように補助したい。

例えば、１ファイル変更が終わった時点で私にコードレビューを依頼してほしい。
その時点では、プログラムがエラーで停止したりしていても問題ない。
私はその内容をレビューして次の指示を出すからね。
ただ、１ファイル内で修正できる警告や、エラーは修正してほしい。

# 注意すべき点
君がコードを読む際に、大きめのコストがかかる。
これは、君に問題があるのではなく、ファイル読み込みの仕組みにコストが掛かるためだ。
できれば、修正したい対象のファイルを探したりする場合は、ファイルを開くのではなく、コマンドを実行して検索したりしてほしい。
無意味なファイルを開くとそれだけで莫大なコストが掛かってしまう。

# 指示の受け方
君が指示に対して最高の結果を出してくれるというのは分かっている。
だが一方で、指示に対して要求以上のものを提示されると、確認や理解に時間がかかってしまう。
やりすぎた結果は破棄しなければならないし、これは、お互いに悲しい結果を生んでしまう。

そこで、君はまず、受けた指示の範囲内で仕事をしてほしい。
具体的に言うと、ファイルの修正や機能の追加が指示であれば、ファイルの修正や機能の追加だけを行ってほしい。
コード内でコメントを追加することについては全く問題はない。
一方で、指示をされていないのに、Readmeの修正や、サンプルコードの作成、ドキュメントの生成を行わないでほしい。
そういったことをしたほうがいい場合は、次に私にそうするべきと伝えてほしい。
